# ===============================================================================================================
# AAS-connect 
# is a GraphQL Reference Schema for the Asset Administration Shell
# according AAS Metamodel Specification 
# IDTA specification document: IDTA 01001-3-0
# ---------------------------------------------------------------------------------------------------------------
# Library: None
# ---------------------------------------------------------------------------------------------------------------
# Specification of AAS-connet: https://www.aas-connect.com/gql-schema
# GitHub repository: https://github.com/foprs/aas-connect-schema
# ---------------------------------------------------------------------------------------------------------------
# Version: beta
# Author: FoP Consult GmbH, Dr.-Ing. Rico Schady, Mohammad Hossein Rimaz
# Licence: CC-BY-4.0 license
# ---------------------------------------------------------------------------------------------------------------
# Comments:
# - See decisions.md file
# ---------------------------------------------------------------------------------------------------------------


enum ReferenceTypes{
	ExternalReference
	ModelReference
}

enum ModellingKind{
	Instance
	Template
}

enum QualifierKind{
	ConceptQualifier
	TemplateQualifier
	ValueQualifier
}

enum KeyTypes{
	AnnotatedRelationshipElement
	AssetAdministrationShell
	BasicEventElement
	Blob
	Capability
	ConceptDescription
	DataElement
	Entity
	EventElement
	File
	FragmentReference
	GlobalReference
	Identifiable
	MultiLanguageProperty
	Operation
	Property
	Range
	Referable
	ReferenceElement
	RelationshipElement
	Submodel
	SubmodelElement
	SubmodelElementCollection
	SubmodelElementList
}

enum DataTypeDefXsd{
	xs_anyURI
	xs_base64Binary
	xs_boolean
	xs_byte
	xs_date
	xs_dateTime
	xs_decimal
	xs_double
	xs_duration
	xs_float
	xs_gDay
	xs_gMonth
	xs_gMonthDay
	xs_gYear
	xs_gYearMonth
	xs_hexBinary
	xs_int
	xs_integer
	xs_long
	xs_negativeInteger
	xs_nonNegativeInteger
	xs_nonPositiveInteger
	xs_positiveInteger
	xs_short
	xs_string
	xs_time
	xs_unsignedByte
	xs_unsignedInt
	xs_unsignedLong
	xs_unsignedShort
}

enum ModelType{
	AnnotatedRelationshipElement
	AssetAdministrationShell
	BasicEventElement
	Blob
	Capability
	ConceptDescription
	DataSpecificationIec61360
	DataElement
	Entity
	File
	MultiLanguageProperty
	Operation
	Property
	Range
	ReferenceElement
	RelationshipElement
	Submodel
	SubmodelElementCollection
	SubmodelElementList
}

enum AasSubmodelElements{
	AnnotatedRelationshipElement
	BasicEventElement
	Blob
	Capability
	DataElement
	Entity
	EventElement
	File
	MultiLanguageProperty
	Operation
	Property
	Range
	ReferenceElement
	RelationshipElement
	SubmodelElement
	SubmodelElementCollection
	SubmodelElementList
}

enum DataTypeIec61360{
	BLOB
	BOOLEAN
	DATE
	FILE
	HTML
	INTEGER_COUNT
	INTEGER_CURRENCY
	INTEGER_MEASURE
	IRDI
	IRI
	RATIONAL
	RATIONAL_MEASURE
	REAL_COUNT
	REAL_CURRENCY
	REAL_MEASURE
	STRING
	STRING_TRANSLATABLE
	TIME
	TIMESTAMP
}

enum AssetKind{
	Type
	Instance
	NotApplicable
}

enum EntityType{
	CoManagedEntity
	SelfManagedEntity
}
enum Direction{
	input
	output
}
enum StateOfEvent{
	off
	on
}

interface AbstractLangString{
	language: String!
	text: String!
}

type LangStringNameType implements AbstractLangString{
	language: String!
	text: String!
}

type LangStringTextType implements AbstractLangString{
	language: String!
	text: String!
}

type Key{
	type: KeyTypes
	value: String!
}

type Reference{
	type: ReferenceTypes!
	keys: [Key!]!
	referredSemanticId: Reference
}

interface HasSemantics{
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
}

type Extension implements HasSemantics{
	name: String!
	valueType: DataTypeDefXsd
	value: String
	refersTo: [Reference!]
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
}

interface HasExtensions{
	extensions: [Extension!]
}

interface Referable{
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	extensions: [Extension!]
}

type LangStringPreferredNameTypeIec61360 implements AbstractLangString{
	language: String!
	text: String!
}

type LangStringShortNameTypeIec61360 implements AbstractLangString{
	language: String!
	text: String!
}

type LangStringDefinitionTypeIec61360 implements AbstractLangString{
	language: String!
	text: String!
}

type LevelType{
	min: Boolean
	nom: Boolean
	typ: Boolean
	max: Boolean
}

type ValueReferencePair{
	value: String
	valueId: Reference
}

type ValueList{
	valueReferencePairs: [ValueReferencePair!]!
}

type DataSpecificationIec61360{
	preferredName: [LangStringPreferredNameTypeIec61360!]!
	shortName: [LangStringShortNameTypeIec61360!]
	unit: String
	unitId: String
	dataType: DataTypeIec61360
	definition: [LangStringDefinitionTypeIec61360!]
	valueFormat: String
	valueList: ValueList
	value: String
	levelType: LevelType
	modelType: ModelType!
}

type EmbeddedDataSpecification{
	dataSpecification: Reference
	dataSpecificationContent: DataSpecificationIec61360
}

interface HasDataSpecification{
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type AdministrativeInformation implements HasDataSpecification{
	version: String
	revision: String
	creator: Reference
	templateId: String
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

interface Identifiable{
	id: String!
	administration: AdministrativeInformation
}


type ConceptDescription implements Identifiable & HasDataSpecification{
	id: String!
	administration: AdministrativeInformation
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
	isCaseOf: [Reference!]
	modelType: ModelType!
}


type SpecificAssetId implements HasSemantics{
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	name: String!
	value: String!
	externalSubjectId: Reference
}

type Resource{
	path: String!
	contentType: String
}

type AssetInformation{
	assetKind: AssetKind
	globalAssetId: String
	specificAssetIds: [SpecificAssetId!]
	assetType: String
	defaultThumbnail: Resource
}

type AssetAdministrationShell implements Identifiable & HasDataSpecification{
	id: String!
	extensions: [Extension!]
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	administration: AdministrativeInformation
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
	derivedFrom: Reference
	assetInformation: AssetInformation
	submodels: [Reference!]
	modelType: ModelType!
}

type Qualifier implements HasSemantics{
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	kind: QualifierKind
	type: String!
	valueType: DataTypeDefXsd!
	value: String
	valueId: Reference
}

interface Qualifiable{
	qualifiers: [Qualifier!]
}
interface SubmodelElement{
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

interface DataElement {
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

interface HasKind{
    kind: ModellingKind
}


type Submodel implements Identifiable & HasKind & HasSemantics & Qualifiable & HasDataSpecification{
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	administration: AdministrativeInformation
	id: String!
	kind: ModellingKind
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
	submodelElements: [SubmodelElement!]
}


type Blob implements DataElement{
	value: String
	contentType: String!
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type File implements DataElement{
	value: String
	contentType: String!
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type Property implements DataElement{
	valueType: DataTypeDefXsd!
	value: String
	valueId: Reference
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type Range implements DataElement{
	valueType: DataTypeDefXsd!
	min: String
	max: String
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type ReferenceElement implements DataElement{
	value: Reference
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type MultiLanguageProperty implements DataElement{
	value: LangStringTextType
	valueId: Reference
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type RelationshipElement implements SubmodelElement{
	first: Reference
	second: Reference
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type AnnotatedRelationshipElement implements SubmodelElement{
	annotation: [DataElement]
	first: Reference
	second: Reference
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type Capability implements SubmodelElement{
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type SubmodelElementList implements SubmodelElement{
	orderRelevant: Boolean
	semanticIdListElement: Reference
	typeValueListElement: AasSubmodelElements
	valueTypeListElement: DataTypeDefXsd
	value: [SubmodelElement!]
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type SubmodelElementCollection implements SubmodelElement{
	value: [SubmodelElement!]
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type Entity implements SubmodelElement{
	statements: [SubmodelElement!]
	entityType: EntityType!
	globalAssetId: String
	specificAssetIds: [SpecificAssetId!]
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type EventElement implements SubmodelElement{
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type BasicEventElement implements SubmodelElement{
	observed: Reference!
	direction: Direction!
	state: StateOfEvent!
	messageTopic: String
	messageBroker: Reference
	lastUpdate: String
	minInterval: String
	maxInterval: String
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type OperationVariable implements SubmodelElement{
	value: SubmodelElement
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

type Operation implements SubmodelElement{
	inputVariable: [OperationVariable!]
	outputVariable: [OperationVariable!]
	inoutputVariable: [OperationVariable!]
	extensions: [Extension!]
	category: String
	idShort: String
	displayName: [LangStringNameType!]
	description: [LangStringTextType!]
	modelType: ModelType!
	semanticId: Reference
	supplementalSemanticIds: [Reference!]
	qualifiers: [Qualifier!]
	embeddedDataSpecifications: [EmbeddedDataSpecification!]
}

